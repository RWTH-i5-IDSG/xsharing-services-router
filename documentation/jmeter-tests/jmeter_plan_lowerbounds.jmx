<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">http-remoting://137.226.232.43:8090</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Random Test Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <longProp name="ThreadGroup.start_time">1439831427000</longProp>
        <longProp name="ThreadGroup.end_time">1439831427000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Random Var Generator" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.*;

String [] params = Parameters.split(&quot;,&quot;);

//double seed = Double.valueOf(params[4]);
double latMax = Double.valueOf(params[0]);
double lonMax = Double.valueOf(params[1]);
double latMin = Double.valueOf(params[2]);
double lonMin = Double.valueOf(params[3]);
Random r = new Random();

double startLat = latMin + (latMax - latMin) * r.nextDouble();
double startLon = lonMin + (lonMax - lonMin) * r.nextDouble();

vars.put(&quot;RNDLATSTART&quot;,startLat.toString());
vars.put(&quot;RNDLONSTART&quot;,startLon.toString());

double endLat = latMin + (latMax - latMin) * r.nextDouble();
double endLon = lonMin + (lonMax - lonMin) * r.nextDouble();

vars.put(&quot;RNDLATEND&quot;,endLat.toString());
vars.put(&quot;RNDLONEND&quot;,endLon.toString());

// generate timestamp for request
long time = new java.util.Date().getTime();
vars.put(&quot;TIMESTAMP&quot;,String.valueOf(time));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${RND_MAX_LAT},${RND_MAX_LON},${RND_MIN_LAT},${RND_MIN_LON},${RND_SEED},</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="RND_MAX_LON" elementType="Argument">
                  <stringProp name="Argument.name">RND_MAX_LON</stringProp>
                  <stringProp name="Argument.value">6.098494</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RND_MAX_LAT" elementType="Argument">
                  <stringProp name="Argument.name">RND_MAX_LAT</stringProp>
                  <stringProp name="Argument.value">50.784048</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RND_MIN_LON" elementType="Argument">
                  <stringProp name="Argument.name">RND_MIN_LON</stringProp>
                  <stringProp name="Argument.value">6.061009</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RND_MIN_LAT" elementType="Argument">
                  <stringProp name="Argument.name">RND_MIN_LAT</stringProp>
                  <stringProp name="Argument.value">50.766106</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RND_SEED" elementType="Argument">
                  <stringProp name="Argument.name">RND_SEED</stringProp>
                  <stringProp name="Argument.value">12472757410</stringProp>
                  <stringProp name="Argument.desc">Seed for initialization of PRNG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${RNDLATEND}&quot; &gt; 0;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Route Request" enabled="true">
              <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
              <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingLowerBoundsRequestQueue</stringProp>
              <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
              <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
              <boolProp name="JMSSampler.isNonPersistent">true</boolProp>
              <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
              <stringProp name="JMSSampler.timeout">0</stringProp>
              <stringProp name="HTTPSamper.xml_data">{
	&quot;startGeoCoordinate&quot;:{
		&quot;longitude&quot;:${RNDLONSTART},
		&quot;latitude&quot;:${RNDLATSTART}
	},
	&quot;endGeoCoordinates&quot;:[{
		&quot;longitude&quot;:${RNDLONEND},
		&quot;latitude&quot;:${RNDLATEND}
	}],
	&quot;modalType&quot;: &quot;bike&quot;
}</stringProp>
              <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
              <stringProp name="JMSSampler.contextProviderUrl">${URL}</stringProp>
              <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="java.naming.security.principal" elementType="Argument">
                    <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                    <stringProp name="Argument.value">guest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.naming.security.credentials" elementType="Argument">
                    <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                    <stringProp name="Argument.value">guest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.naming.factory.url.pkgs" elementType="Argument">
                    <stringProp name="Argument.name">java.naming.factory.url.pkgs</stringProp>
                    <stringProp name="Argument.value">org.jboss.naming.remote.client</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="jboss.naming.client.connect.timeout" elementType="Argument">
                    <stringProp name="Argument.name">jboss.naming.client.connect.timeout</stringProp>
                    <stringProp name="Argument.value">10000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="arguments" elementType="JMSProperties">
                <collectionProp name="JMSProperties.properties">
                  <elementProp name="" elementType="JMSProperty">
                    <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                    <stringProp name="JMSProperty.value">asdf</stringProp>
                    <stringProp name="JMSProperty.type">java.lang.String</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="JMSSampler.priority">9</stringProp>
              <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
            </JMSSampler>
            <hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename">test.csv</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">results.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
