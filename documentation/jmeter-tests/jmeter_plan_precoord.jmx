<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Precomputed Requests Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="FILENAME" elementType="Argument">
            <stringProp name="Argument.name">FILENAME</stringProp>
            <stringProp name="Argument.value">requests</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">http-remoting://137.226.232.43:8090</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Random Coordinates" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">150</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445077963000</longProp>
        <longProp name="ThreadGroup.end_time">1445077963000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RND_MAX_LON" elementType="Argument">
              <stringProp name="Argument.name">RND_MAX_LON</stringProp>
              <stringProp name="Argument.value">6.098494</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RND_MAX_LAT" elementType="Argument">
              <stringProp name="Argument.name">RND_MAX_LAT</stringProp>
              <stringProp name="Argument.value">50.784048</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RND_MIN_LON" elementType="Argument">
              <stringProp name="Argument.name">RND_MIN_LON</stringProp>
              <stringProp name="Argument.value">6.061009</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RND_MIN_LAT" elementType="Argument">
              <stringProp name="Argument.name">RND_MIN_LAT</stringProp>
              <stringProp name="Argument.value">50.766106</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RND_SEED" elementType="Argument">
              <stringProp name="Argument.name">RND_SEED</stringProp>
              <stringProp name="Argument.value">12472757410</stringProp>
              <stringProp name="Argument.desc">Seed for initialization of PRNG</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COUNT" elementType="Argument">
              <stringProp name="Argument.name">COUNT</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.desc">Amount of coordinates to generate for one request</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Random Request Generator Nx1x1xtrue" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.*;

String [] params = Parameters.split(&quot;,&quot;);

// set up the request strings
String s1 = &quot;{\&quot;startGeoCoordinates\&quot;:[&quot;;
String s3 = &quot;],\&quot;endGeoCoordinates\&quot;:[{\&quot;longitude\&quot;:&quot;;
String s4 = &quot;,\&quot;latitude\&quot;:&quot;;
String s5 = &quot;}],\&quot;departureTime\&quot;:[&quot;;
String s6 = &quot;],\&quot;isArrivalTime\&quot;:true,\&quot;isLastLeg\&quot;:false,\&quot;isWithReturn\&quot;:false,\&quot;stayTime\&quot;: 0,\&quot;maxWalkDistance\&quot;:4500}&quot;;

// set up output file 
String filename = params[6];
FileWriter fstream = new FileWriter(filename + &quot;-n11t.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(s1);

//double seed = Double.valueOf(params[4]);
double latMax = Double.valueOf(params[0]);
double lonMax = Double.valueOf(params[1]);
double latMin = Double.valueOf(params[2]);
double lonMin = Double.valueOf(params[3]);
int count = Integer.valueOf(params[5]);

// generate n starting points (n = count)
for (int i = 0; i &lt; count; i++) {
	Random r = new Random();

	double startLat = latMin + (latMax - latMin) * r.nextDouble();
	double startLon = lonMin + (lonMax - lonMin) * r.nextDouble();
	

	String coords = &quot;{\&quot;longitude\&quot;:&quot; + startLon + &quot;,\&quot;latitude\&quot;:&quot; + startLat + &quot;}&quot;;
	if (i != count - 1) 
		coords += &quot;,&quot;;
	out.write(coords);
}

out.write(s3);

// generate one target point
Random r = new Random();
double endLat = latMin + (latMax - latMin) * r.nextDouble();
double endLon = lonMin + (lonMax - lonMin) * r.nextDouble();

// generate timestamp for request
long time = new java.util.Date().getTime();

out.write(String.valueOf(endLon));
out.write(s4);
out.write(String.valueOf(endLat));
out.write(s5);
out.write(String.valueOf(time));
out.write(s6);

out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">${RND_MAX_LAT},${RND_MAX_LON},${RND_MIN_LAT},${RND_MIN_LON},${RND_SEED},${COUNT},${FILENAME}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Random Request Generator Nx1xNxfalse" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.*;

String [] params = Parameters.split(&quot;,&quot;);

// set up the request strings
String s1 = &quot;{\&quot;startGeoCoordinates\&quot;:[&quot;;
String s3 = &quot;],\&quot;endGeoCoordinates\&quot;:[{\&quot;longitude\&quot;:&quot;;
String s4 = &quot;,\&quot;latitude\&quot;:&quot;;
String s5 = &quot;}],\&quot;departureTime\&quot;:[&quot;;
String s6 = &quot;],\&quot;isArrivalTime\&quot;:false,\&quot;isLastLeg\&quot;:false,\&quot;isWithReturn\&quot;:false,\&quot;stayTime\&quot;: 0,\&quot;maxWalkDistance\&quot;:4500}&quot;;

// set up output file 
String filename = params[6];
FileWriter fstream = new FileWriter(filename + &quot;-n11t.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(s1);

//double seed = Double.valueOf(params[4]);
double latMax = Double.valueOf(params[0]);
double lonMax = Double.valueOf(params[1]);
double latMin = Double.valueOf(params[2]);
double lonMin = Double.valueOf(params[3]);
int count = Integer.valueOf(params[5]);

// generate n starting points (n = count)
for (int i = 0; i &lt; count; i++) {
	Random r = new Random();

	double startLat = latMin + (latMax - latMin) * r.nextDouble();
	double startLon = lonMin + (lonMax - lonMin) * r.nextDouble();
	

	String coords = &quot;{\&quot;longitude\&quot;:&quot; + startLon + &quot;,\&quot;latitude\&quot;:&quot; + startLat + &quot;}&quot;;
	if (i != count - 1) 
		coords += &quot;,&quot;;
	out.write(coords);
}

out.write(s3);

// generate one target point
Random r = new Random();
double endLat = latMin + (latMax - latMin) * r.nextDouble();
double endLon = lonMin + (lonMax - lonMin) * r.nextDouble();


out.write(String.valueOf(endLon));
out.write(s4);
out.write(String.valueOf(endLat));
out.write(s5);

// generate timestamp for request
for (int j = 0; j &lt; count; j++) {
	Random r = new Random();
	long time = new java.util.Date().getTime();
	out.write(String.valueOf(time));
	if (j != count - 1)
		out.write(&quot;,&quot;);
}

out.write(s6);

out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">${RND_MAX_LAT},${RND_MAX_LON},${RND_MIN_LAT},${RND_MIN_LON},${RND_SEED},${COUNT},${FILENAME}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Random Request Generator 1xNxNxtrue" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.*;

String [] params = Parameters.split(&quot;,&quot;);

// set up the request strings
String s1 = &quot;{\&quot;startGeoCoordinates\&quot;:[{\&quot;longitude\&quot;:&quot;;
String s2 = &quot;,\&quot;latitude\&quot;:&quot;;
String s3 = &quot;}],\&quot;endGeoCoordinates\&quot;:[&quot;;

String s5 = &quot;],\&quot;departureTime\&quot;:[&quot;;
String s6 = &quot;],\&quot;isArrivalTime\&quot;:true,\&quot;isLastLeg\&quot;:false,\&quot;isWithReturn\&quot;:false,\&quot;stayTime\&quot;: 0,\&quot;maxWalkDistance\&quot;:4500}&quot;;

//double seed = Double.valueOf(params[4]);
double latMax = Double.valueOf(params[0]);
double lonMax = Double.valueOf(params[1]);
double latMin = Double.valueOf(params[2]);
double lonMin = Double.valueOf(params[3]);
int count = Integer.valueOf(params[5]);

// set up output file 
String filename = params[6];
FileWriter fstream = new FileWriter(filename + &quot;-1nnt.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(s1);

// generate one starting point
Random r = new Random();
double startLat = latMin + (latMax - latMin) * r.nextDouble();
double startLon = lonMin + (lonMax - lonMin) * r.nextDouble();

out.write(String.valueOf(startLon));
out.write(s2);
out.write(String.valueOf(startLat));
out.write(s3);

// generate n starting points (n = count)
for (int i = 0; i &lt; count; i++) {
	Random r = new Random();

	double endLat = latMin + (latMax - latMin) * r.nextDouble();
	double endLon = lonMin + (lonMax - lonMin) * r.nextDouble();
	
	String coords = &quot;{\&quot;longitude\&quot;:&quot; + endLon + &quot;,\&quot;latitude\&quot;:&quot; + endLat + &quot;}&quot;;
	if (i != count - 1) 
		coords += &quot;,&quot;;
	out.write(coords);
}

out.write(s5);

// generate timestamp for request
for (int j = 0; j &lt; count; j++) {
	Random r = new Random();
	long time = new java.util.Date().getTime();
	out.write(String.valueOf(time));
	if (j != count - 1)
		out.write(&quot;,&quot;);
}

out.write(s6);

out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">${RND_MAX_LAT},${RND_MAX_LON},${RND_MIN_LAT},${RND_MIN_LON},${RND_SEED},${COUNT},${FILENAME}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Random Request Generator 1xNx1xfalse" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.*;

String [] params = Parameters.split(&quot;,&quot;);

// set up the request strings
String s1 = &quot;{\&quot;startGeoCoordinates\&quot;:[{\&quot;longitude\&quot;:&quot;;
String s2 = &quot;,\&quot;latitude\&quot;:&quot;;
String s3 = &quot;}],\&quot;endGeoCoordinates\&quot;:[&quot;;

String s5 = &quot;],\&quot;departureTime\&quot;:[&quot;;
String s6 = &quot;],\&quot;isArrivalTime\&quot;:false,\&quot;isLastLeg\&quot;:false,\&quot;isWithReturn\&quot;:false,\&quot;stayTime\&quot;: 0,\&quot;maxWalkDistance\&quot;:4500}&quot;;

//double seed = Double.valueOf(params[4]);
double latMax = Double.valueOf(params[0]);
double lonMax = Double.valueOf(params[1]);
double latMin = Double.valueOf(params[2]);
double lonMin = Double.valueOf(params[3]);
int count = Integer.valueOf(params[5]);

// set up output file 
String filename = params[6];
FileWriter fstream = new FileWriter(filename + &quot;-1nnt.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(s1);

// generate one starting point
Random r = new Random();
double startLat = latMin + (latMax - latMin) * r.nextDouble();
double startLon = lonMin + (lonMax - lonMin) * r.nextDouble();

out.write(String.valueOf(startLon));
out.write(s2);
out.write(String.valueOf(startLat));
out.write(s3);

// generate n starting points (n = count)
for (int i = 0; i &lt; count; i++) {
	Random r = new Random();

	double endLat = latMin + (latMax - latMin) * r.nextDouble();
	double endLon = lonMin + (lonMax - lonMin) * r.nextDouble();
	
	String coords = &quot;{\&quot;longitude\&quot;:&quot; + endLon + &quot;,\&quot;latitude\&quot;:&quot; + endLat + &quot;}&quot;;
	if (i != count - 1) 
		coords += &quot;,&quot;;
	out.write(coords);
}

out.write(s5);

// generate timestamp for request
long time = new java.util.Date().getTime();
out.write(String.valueOf(time));


out.write(s6);

out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">${RND_MAX_LAT},${RND_MAX_LON},${RND_MIN_LAT},${RND_MIN_LON},${RND_SEED},${COUNT},${FILENAME}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JMS Thread Group (Point-To_Point)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">25</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1439831427000</longProp>
        <longProp name="ThreadGroup.end_time">1439831427000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Route Request (n11t)" enabled="true">
          <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
          <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingMinimalRequestQueue</stringProp>
          <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
          <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
          <boolProp name="JMSSampler.isNonPersistent">true</boolProp>
          <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
          <stringProp name="JMSSampler.timeout">0</stringProp>
          <stringProp name="HTTPSamper.xml_data">${REQUEST}</stringProp>
          <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
          <stringProp name="JMSSampler.contextProviderUrl">${URL}</stringProp>
          <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="java.naming.security.principal" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.security.credentials" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jboss.naming.client.ejb.context" elementType="Argument">
                <stringProp name="Argument.name">jboss.naming.client.ejb.context</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.factory.url.pkgs" elementType="Argument">
                <stringProp name="Argument.name">java.naming.factory.url.pkgs</stringProp>
                <stringProp name="Argument.value">org.jboss.naming.remote.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="arguments" elementType="JMSProperties">
            <collectionProp name="JMSProperties.properties">
              <elementProp name="" elementType="JMSProperty">
                <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                <stringProp name="JMSProperty.value">asdf</stringProp>
                <stringProp name="JMSProperty.type">java.lang.String</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="JMSSampler.priority">9</stringProp>
          <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
        </JMSSampler>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${FILENAME}-n11t.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">REQUEST</stringProp>
            <stringProp name="delimiter">?</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="true">
            <stringProp name="VAR">ERROR_CODE</stringProp>
            <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
            <stringProp name="DEFAULT">null</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ERROR_CODE</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">ROUTE_ID</stringProp>
            <stringProp name="JSONPATH">$.tripId</stringProp>
            <stringProp name="DEFAULT">&quot;null&quot;</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Route Request (1nnt)" enabled="true">
          <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
          <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingMinimalRequestQueue</stringProp>
          <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
          <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
          <boolProp name="JMSSampler.isNonPersistent">true</boolProp>
          <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
          <stringProp name="JMSSampler.timeout">0</stringProp>
          <stringProp name="HTTPSamper.xml_data">${REQUEST}</stringProp>
          <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
          <stringProp name="JMSSampler.contextProviderUrl">${URL}</stringProp>
          <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="java.naming.security.principal" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.security.credentials" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jboss.naming.client.ejb.context" elementType="Argument">
                <stringProp name="Argument.name">jboss.naming.client.ejb.context</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.factory.url.pkgs" elementType="Argument">
                <stringProp name="Argument.name">java.naming.factory.url.pkgs</stringProp>
                <stringProp name="Argument.value">org.jboss.naming.remote.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="arguments" elementType="JMSProperties">
            <collectionProp name="JMSProperties.properties">
              <elementProp name="" elementType="JMSProperty">
                <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                <stringProp name="JMSProperty.value">asdf</stringProp>
                <stringProp name="JMSProperty.type">java.lang.String</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="JMSSampler.priority">9</stringProp>
          <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
        </JMSSampler>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${FILENAME}-1nnt.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">REQUEST</stringProp>
            <stringProp name="delimiter">?</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="true">
            <stringProp name="VAR">ERROR_CODE</stringProp>
            <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
            <stringProp name="DEFAULT">null</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ERROR_CODE</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">ROUTE_ID</stringProp>
            <stringProp name="JSONPATH">$.tripId</stringProp>
            <stringProp name="DEFAULT">&quot;null&quot;</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Route Request (n1nf)" enabled="true">
          <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
          <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingMinimalRequestQueue</stringProp>
          <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
          <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
          <boolProp name="JMSSampler.isNonPersistent">true</boolProp>
          <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
          <stringProp name="JMSSampler.timeout">0</stringProp>
          <stringProp name="HTTPSamper.xml_data">${REQUEST}</stringProp>
          <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
          <stringProp name="JMSSampler.contextProviderUrl">${URL}</stringProp>
          <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="java.naming.security.principal" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.security.credentials" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jboss.naming.client.ejb.context" elementType="Argument">
                <stringProp name="Argument.name">jboss.naming.client.ejb.context</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.factory.url.pkgs" elementType="Argument">
                <stringProp name="Argument.name">java.naming.factory.url.pkgs</stringProp>
                <stringProp name="Argument.value">org.jboss.naming.remote.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="arguments" elementType="JMSProperties">
            <collectionProp name="JMSProperties.properties">
              <elementProp name="" elementType="JMSProperty">
                <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                <stringProp name="JMSProperty.value">asdf</stringProp>
                <stringProp name="JMSProperty.type">java.lang.String</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="JMSSampler.priority">9</stringProp>
          <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
        </JMSSampler>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${FILENAME}-n1nf.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">REQUEST</stringProp>
            <stringProp name="delimiter">?</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="true">
            <stringProp name="VAR">ERROR_CODE</stringProp>
            <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
            <stringProp name="DEFAULT">null</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ERROR_CODE</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">ROUTE_ID</stringProp>
            <stringProp name="JSONPATH">$.tripId</stringProp>
            <stringProp name="DEFAULT">&quot;null&quot;</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Route Request (1n1f)" enabled="true">
          <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
          <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingMinimalRequestQueue</stringProp>
          <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
          <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
          <boolProp name="JMSSampler.isNonPersistent">true</boolProp>
          <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
          <stringProp name="JMSSampler.timeout">0</stringProp>
          <stringProp name="HTTPSamper.xml_data">${REQUEST}</stringProp>
          <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
          <stringProp name="JMSSampler.contextProviderUrl">${URL}</stringProp>
          <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="java.naming.security.principal" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.security.credentials" elementType="Argument">
                <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                <stringProp name="Argument.value">guest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jboss.naming.client.ejb.context" elementType="Argument">
                <stringProp name="Argument.name">jboss.naming.client.ejb.context</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.naming.factory.url.pkgs" elementType="Argument">
                <stringProp name="Argument.name">java.naming.factory.url.pkgs</stringProp>
                <stringProp name="Argument.value">org.jboss.naming.remote.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="arguments" elementType="JMSProperties">
            <collectionProp name="JMSProperties.properties">
              <elementProp name="" elementType="JMSProperty">
                <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                <stringProp name="JMSProperty.value">asdf</stringProp>
                <stringProp name="JMSProperty.type">java.lang.String</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="JMSSampler.priority">9</stringProp>
          <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
        </JMSSampler>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${FILENAME}-1n1f.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">REQUEST</stringProp>
            <stringProp name="delimiter">?</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="true">
            <stringProp name="VAR">ERROR_CODE</stringProp>
            <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
            <stringProp name="DEFAULT">null</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">12</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ERROR_CODE</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">ROUTE_ID</stringProp>
            <stringProp name="JSONPATH">$.tripId</stringProp>
            <stringProp name="DEFAULT">&quot;null&quot;</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="false">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Follow Up" enabled="false">
            <stringProp name="maximumValue">10</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">DO_FOLLOW_UP</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Variables" enabled="false">
            <stringProp name="IfController.condition">&quot;${RNDLATEND}&quot; &gt; 0;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">${ROUTE_ID} != &quot;null&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If (Compact FollowUp)" enabled="false">
                <stringProp name="IfController.condition">${DO_FOLLOW_UP} == 1;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Compact Follow Up" enabled="true">
                  <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
                  <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingCompactRequestQueue</stringProp>
                  <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
                  <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
                  <boolProp name="JMSSampler.isNonPersistent">false</boolProp>
                  <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
                  <stringProp name="JMSSampler.timeout">0</stringProp>
                  <stringProp name="HTTPSamper.xml_data">{&quot;tripId&quot;: &quot;${ROUTE_ID}&quot;}</stringProp>
                  <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
                  <stringProp name="JMSSampler.contextProviderUrl">http-remoting://137.226.232.43:8090</stringProp>
                  <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="java.naming.security.principal" elementType="Argument">
                        <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                        <stringProp name="Argument.value">guest</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="java.naming.security.credentials" elementType="Argument">
                        <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                        <stringProp name="Argument.value">guest</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="arguments" elementType="JMSProperties">
                    <collectionProp name="JMSProperties.properties">
                      <elementProp name="" elementType="JMSProperty">
                        <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                        <stringProp name="JMSProperty.value">asdfzzz</stringProp>
                        <stringProp name="JMSProperty.type">java.lang.String</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="JMSSampler.priority">9</stringProp>
                  <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
                </JMSSampler>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="false">
                    <stringProp name="VAR">ERROR_CODE</stringProp>
                    <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
                    <stringProp name="DEFAULT">null</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ERROR_CODE</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON null check" enabled="false">
                    <stringProp name="JSON_PATH">$.routerError</stringProp>
                    <stringProp name="EXPECTED_VALUE"></stringProp>
                    <boolProp name="JSONVALIDATION">false</boolProp>
                    <boolProp name="EXPECT_NULL">true</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If (Details FollowUp)" enabled="false">
                <stringProp name="IfController.condition">${DO_FOLLOW_UP} == 2;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JMSSampler guiclass="JMSSamplerGui" testclass="JMSSampler" testname="Details Follow Up" enabled="true">
                  <stringProp name="JMSSampler.queueconnectionfactory">jms/RemoteConnectionFactory</stringProp>
                  <stringProp name="JMSSampler.SendQueue">jms/queue/xSharingDetailsRequestQueue</stringProp>
                  <stringProp name="JMSSampler.ReceiveQueue"></stringProp>
                  <boolProp name="JMSSampler.isFireAndForget">false</boolProp>
                  <boolProp name="JMSSampler.isNonPersistent">false</boolProp>
                  <boolProp name="JMSSampler.useReqMsgIdAsCorrelId">true</boolProp>
                  <stringProp name="JMSSampler.timeout">0</stringProp>
                  <stringProp name="HTTPSamper.xml_data">{&quot;tripId&quot;: &quot;${ROUTE_ID}&quot;}</stringProp>
                  <stringProp name="JMSSampler.initialContextFactory">org.jboss.naming.remote.client.InitialContextFactory</stringProp>
                  <stringProp name="JMSSampler.contextProviderUrl">http-remoting://137.226.232.43:8090</stringProp>
                  <elementProp name="JMSSampler.jndiProperties" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="java.naming.security.credentials" elementType="Argument">
                        <stringProp name="Argument.name">java.naming.security.credentials</stringProp>
                        <stringProp name="Argument.value">guest</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="java.naming.security.principal" elementType="Argument">
                        <stringProp name="Argument.name">java.naming.security.principal</stringProp>
                        <stringProp name="Argument.value">guest</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="arguments" elementType="JMSProperties">
                    <collectionProp name="JMSProperties.properties">
                      <elementProp name="" elementType="JMSProperty">
                        <stringProp name="JMSProperty.name">JMSCorrelationID</stringProp>
                        <stringProp name="JMSProperty.value">asdfzzz</stringProp>
                        <stringProp name="JMSProperty.type">java.lang.String</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="JMSSampler.priority">9</stringProp>
                  <boolProp name="JMSSampler.useResMsgIdAsCorrelId">true</boolProp>
                </JMSSampler>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - error code extractor" enabled="false">
                    <stringProp name="VAR">ERROR_CODE</stringProp>
                    <stringProp name="JSONPATH">$.routerError.errorCode</stringProp>
                    <stringProp name="DEFAULT">null</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1818261426">NO_ROUTE_FOUND</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ERROR_CODE</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON null check" enabled="false">
                    <stringProp name="JSON_PATH">$.routerError</stringProp>
                    <stringProp name="EXPECTED_VALUE"></stringProp>
                    <boolProp name="JSONVALIDATION">false</boolProp>
                    <boolProp name="EXPECT_NULL">true</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">prec-${__time(HHmm_dd-MM-yyyy)}.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">results.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
